
// ********RoostGPT********
/*
Test generated by RoostGPT for test SampleJavaTest using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
Scenario 1: Test for Normal Values

Details:
  TestName: testAverageWithNormalValues.
  Description: This test is to validate the average calculation when normal values are set for a and b.
Execution:
  Arrange: Use setA and setB methods to set normal values (for example, a=2.0 and b=3.0).
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  This assertion aims to verify the average calculation with normal values. The expected result is 3.1363636363636362. This test is significant as it tests the basic functionality of the getAverage method.

Scenario 2: Test for Zero Values

Details:
  TestName: testAverageWithZeroValues.
  Description: This test is to validate the average calculation when zero values are set for a and b.
Execution:
  Arrange: Use setA and setB methods to set zero values (for example, a=0.0 and b=0.0).
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  This assertion aims to verify the average calculation with zero values. The expected result is 0.0. This test is significant as it tests the scenario where the student has scored zero in both the subjects.

Scenario 3: Test for Negative Values

Details:
  TestName: testAverageWithNegativeValues.
  Description: This test is to validate the average calculation when negative values are set for a and b.
Execution:
  Arrange: Use setA and setB methods to set negative values (for example, a=-2.0 and b=-3.0).
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  This assertion aims to verify the average calculation with negative values. The expected result is -3.1363636363636362. This test is significant as it tests the scenario where the values might be incorrectly set as negative.

Scenario 4: Test for Maximum Values

Details:
  TestName: testAverageWithMaxValues.
  Description: This test is to validate the average calculation when maximum values are set for a and b.
Execution:
  Arrange: Use setA and setB methods to set maximum values (for example, a=Double.MAX_VALUE and b=Double.MAX_VALUE).
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome.
Validation:
  This assertion aims to verify the average calculation with maximum values. The expected result is Double.MAX_VALUE. This test is significant as it tests the scenario where the maximum possible values are used.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {

	@Test
	@Tag("valid")
	public void testAverageWithNormalValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		double expected = 3.1363636363636362;
		assertEquals(expected, studentGrade.getAverage());
	}

	@Test
	@Tag("valid")
	public void testAverageWithZeroValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		double expected = 0.0;
		assertEquals(expected, studentGrade.getAverage());
	}

	@Test
	@Tag("invalid")
	public void testAverageWithNegativeValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		double expected = -3.1363636363636362;
		assertEquals(expected, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void testAverageWithMaxValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(Double.MAX_VALUE);
		studentGrade.setB(Double.MAX_VALUE);
		double expected = Double.MAX_VALUE;
		assertEquals(expected, studentGrade.getAverage());
	}

}