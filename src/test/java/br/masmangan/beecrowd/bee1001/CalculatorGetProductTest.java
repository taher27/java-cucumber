/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test SampleJavaTestLogs using AI Type  and AI Model

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

Scenario 1: Test getProduct method with positive values

Details:
  TestName: testGetProductWithPositiveValues
  Description: This test checks the functionality of the getProduct method when both the input parameters are positive integers.
Execution:
  Arrange: Use the setA and setB methods to set the values of a and b to positive integers.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to verify that the returned product is a positive integer and correctly calculated.
Validation:
  This assertion verifies that the getProduct method correctly calculates the product of two positive integers. This is important to ensure accurate calculations in the application.

Scenario 2: Test getProduct method with zero

Details:
  TestName: testGetProductWithZero
  Description: This test checks the functionality of the getProduct method when one or both of the input parameters are zero.
Execution:
  Arrange: Use the setA and setB methods to set the values of a or b or both to zero.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to verify that the returned product is zero.
Validation:
  This assertion verifies that the getProduct method correctly calculates the product when one or both of the input parameters are zero. This is important as multiplying by zero should always return zero.

Scenario 3: Test getProduct method with negative values

Details:
  TestName: testGetProductWithNegativeValues
  Description: This test checks the functionality of the getProduct method when both the input parameters are negative integers.
Execution:
  Arrange: Use the setA and setB methods to set the values of a and b to negative integers.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to verify that the returned product is a positive integer and correctly calculated.
Validation:
  This assertion verifies that the getProduct method correctly calculates the product of two negative integers. This is important as the product of two negative numbers should be positive.

Scenario 4: Test getProduct method with one positive and one negative value

Details:
  TestName: testGetProductWithMixedValues
  Description: This test checks the functionality of the getProduct method when one input parameter is a positive integer and the other is a negative integer.
Execution:
  Arrange: Use the setA and setB methods to set the values of a to a positive integer and b to a negative integer.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to verify that the returned product is a negative integer and correctly calculated.
Validation:
  This assertion verifies that the getProduct method correctly calculates the product when one input is positive and the other is negative. This is important as the product of a positive and a negative number should be negative.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class CalculatorGetProductTest {

	@Test
	@Tag("valid")
	public void testGetProductWithPositiveValues() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(3);
		int result = calculator.getProduct();
		assertEquals(15, result);
	}

	@Test
	@Tag("boundary")
	public void testGetProductWithZero() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(0);
		int result = calculator.getProduct();
		assertEquals(0, result);
	}

	@Test
	@Tag("valid")
	public void testGetProductWithNegativeValues() {
		Calculator calculator = new Calculator();
		calculator.setA(-5);
		calculator.setB(-3);
		int result = calculator.getProduct();
		assertEquals(15, result);
	}

	@Test
	@Tag("valid")
	public void testGetProductWithMixedValues() {
		Calculator calculator = new Calculator();
		calculator.setA(-5);
		calculator.setB(3);
		int result = calculator.getProduct();
		assertEquals(-15, result);
	}

}