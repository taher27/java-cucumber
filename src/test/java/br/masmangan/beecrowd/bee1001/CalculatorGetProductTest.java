/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test SampleJavaTest using AI Type  and AI Model

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

Scenario 1: Test getProduct with positive inputs
Details:
  TestName: testGetProductWithPositiveInputs
  Description: This test verifies the getProduct method when both inputs are positive integers.
Execution:
  Arrange: Create a Calculator object and set 'a' and 'b' to positive integers using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the returned value is the product of 'a' and 'b'.
Validation:
  This test verifies that the getProduct method correctly multiplies two positive integers. The expected result is the mathematical product of the two values.

Scenario 2: Test getProduct with negative inputs
Details:
  TestName: testGetProductWithNegativeInputs
  Description: This test verifies the getProduct method when both inputs are negative integers.
Execution:
  Arrange: Create a Calculator object and set 'a' and 'b' to negative integers using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the returned value is the product of 'a' and 'b'.
Validation:
  This test verifies that the getProduct method correctly multiplies two negative integers. The expected result is the mathematical product of the two values, which should be positive.

Scenario 3: Test getProduct with zero
Details:
  TestName: testGetProductWithZero
  Description: This test verifies the getProduct method when one of the inputs is zero.
Execution:
  Arrange: Create a Calculator object and set 'a' to any integer and 'b' to 0 using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the returned value is 0.
Validation:
  This test verifies that the getProduct method correctly returns 0 when one of the inputs is 0. The expected result is 0, regardless of the value of the other input.

Scenario 4: Test getProduct with one positive and one negative input
Details:
  TestName: testGetProductWithMixedSignInputs
  Description: This test verifies the getProduct method when one input is positive and the other is negative.
Execution:
  Arrange: Create a Calculator object and set 'a' to a positive integer and 'b' to a negative integer using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the returned value is the product of 'a' and 'b' and is negative.
Validation:
  This test verifies that the getProduct method correctly multiplies a positive integer and a negative integer. The expected result is the mathematical product of the two values, which should be negative.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorGetProductTest {

	@Test
	@Tag("valid")
	public void testGetProductWithPositiveInputs() {
		Calculator calculator = new Calculator();
		calculator.setA(10);
		calculator.setB(20);
		int expectedProduct = 200;
		assertEquals(expectedProduct, calculator.getProduct());
	}

	@Test
	@Tag("valid")
	public void testGetProductWithNegativeInputs() {
		Calculator calculator = new Calculator();
		calculator.setA(-10);
		calculator.setB(-20);
		int expectedProduct = 200;
		assertEquals(expectedProduct, calculator.getProduct());
	}

	@Test
	@Tag("boundary")
	public void testGetProductWithZero() {
		Calculator calculator = new Calculator();
		calculator.setA(10);
		calculator.setB(0);
		int expectedProduct = 0;
		assertEquals(expectedProduct, calculator.getProduct());
	}

	@Test
	@Tag("valid")
	public void testGetProductWithMixedSignInputs() {
		Calculator calculator = new Calculator();
		calculator.setA(-10);
		calculator.setB(20);
		int expectedProduct = -200;
		assertEquals(expectedProduct, calculator.getProduct());
	}

}