
// ********RoostGPT********
/*
Test generated by RoostGPT for test SampleJavaTestLogs using AI Type  and AI Model

ROOST_METHOD_HASH=getDifference_8e14ab318e
ROOST_METHOD_SIG_HASH=getDifference_0b169691c7

"""
Scenario 1: Test when all inputs are positive integers
Details:
  TestName: testPositiveIntegerInputs
  Description: This test is meant to check if the method correctly calculates the difference when all inputs (a, b, c, d) are positive integers.
Execution:
  Arrange: Set a, b, c, d to positive integers using the setA, setB, setC, setD methods respectively.
  Act: Invoke the getDifference method.
  Assert: Compare the actual result with the expected result.
Validation:
  This assertion aims to verify that the method correctly handles positive integer inputs. The expected result is calculated manually based on the formula a*b - c*d. It's important to ensure that the method can handle normal cases correctly.

Scenario 2: Test when inputs are zero
Details:
  TestName: testZeroInputs
  Description: This test is meant to check if the method correctly calculates the difference when all inputs (a, b, c, d) are zero.
Execution:
  Arrange: Set a, b, c, d to zero using the setA, setB, setC, setD methods respectively.
  Act: Invoke the getDifference method.
  Assert: Compare the actual result with the expected result, which should be zero.
Validation:
  This assertion aims to verify that the method correctly handles inputs of zero. This test is significant as it tests the method's behavior with the minimum possible input values.

Scenario 3: Test when inputs are negative integers
Details:
  TestName: testNegativeIntegerInputs
  Description: This test is meant to check if the method correctly calculates the difference when all inputs (a, b, c, d) are negative integers.
Execution:
  Arrange: Set a, b, c, d to negative integers using the setA, setB, setC, setD methods respectively.
  Act: Invoke the getDifference method.
  Assert: Compare the actual result with the expected result.
Validation:
  This assertion aims to verify that the method correctly handles negative integer inputs. This is important as it checks if the method can handle less common but valid input cases.

Scenario 4: Test when inputs are mixed (positive, negative, zero)
Details:
  TestName: testMixedInputs
  Description: This test is meant to check if the method correctly calculates the difference when inputs (a, b, c, d) are a mix of positive integers, negative integers, and zero.
Execution:
  Arrange: Set a, b, c, d to a mix of positive integers, negative integers, and zero using the setA, setB, setC, setD methods respectively.
  Act: Invoke the getDifference method.
  Assert: Compare the actual result with the expected result.
Validation:
  This assertion aims to verify that the method correctly handles mixed inputs. This is important as it tests the method's robustness in handling a variety of input cases.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1007;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class ProductGetDifferenceTest {

	private Product product;

	@BeforeEach
	public void setUp() {
		product = new Product();
	}

	@Test
	@Tag("valid")
	public void testPositiveIntegerInputs() {
		product.setA(5);
		product.setB(3);
		product.setC(2);
		product.setD(1);
		int expected = 5 * 3 - 2 * 1;
		assertEquals(expected, product.getDifference());
	}

	@Test
	@Tag("boundary")
	public void testZeroInputs() {
		product.setA(0);
		product.setB(0);
		product.setC(0);
		product.setD(0);
		assertEquals(0, product.getDifference());
	}

	@Test
	@Tag("valid")
	public void testNegativeIntegerInputs() {
		product.setA(-3);
		product.setB(-2);
		product.setC(-1);
		product.setD(-1);
		int expected = -3 * -2 - -1 * -1;
		assertEquals(expected, product.getDifference());
	}

	@Test
	@Tag("valid")
	public void testMixedInputs() {
		product.setA(-5);
		product.setB(2);
		product.setC(0);
		product.setD(1);
		int expected = -5 * 2 - 0 * 1;
		assertEquals(expected, product.getDifference());
	}

}