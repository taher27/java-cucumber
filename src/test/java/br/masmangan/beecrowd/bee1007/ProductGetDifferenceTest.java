// ********RoostGPT********
/*
Test generated by RoostGPT for test testJavaCucumber using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getDifference_8e14ab318e
ROOST_METHOD_SIG_HASH=getDifference_0b169691c7

Scenario 1: Test with positive integers

Details:
  TestName: testGetDifferenceWithPositiveIntegers
  Description: This test is meant to check the functionality of the getDifference method when all the input parameters are positive integers.
  Execution:
    Arrange: Initialize a, b, c, and d with positive integer values.
    Act: Invoke the getDifference method.
    Assert: Assert that the returned value is equal to the expected result (a * b - c * d).
  Validation:
    This assertion verifies that the getDifference method correctly calculates the difference when all parameters are positive integers. This test is significant to ensure the correct behavior of the method under normal usage.

Scenario 2: Test with negative integers

Details:
  TestName: testGetDifferenceWithNegativeIntegers
  Description: This test is meant to check the functionality of the getDifference method when all the input parameters are negative integers.
  Execution:
    Arrange: Initialize a, b, c, and d with negative integer values.
    Act: Invoke the getDifference method.
    Assert: Assert that the returned value is equal to the expected result (a * b - c * d).
  Validation:
    This assertion verifies that the getDifference method correctly calculates the difference when all parameters are negative integers. This test is significant to ensure the correct behavior of the method under edge conditions.

Scenario 3: Test with a mix of positive and negative integers

Details:
  TestName: testGetDifferenceWithMixedIntegers
  Description: This test is meant to check the functionality of the getDifference method when the input parameters are a mix of positive and negative integers.
  Execution:
    Arrange: Initialize a, b, c, and d with a mix of positive and negative integer values.
    Act: Invoke the getDifference method.
    Assert: Assert that the returned value is equal to the expected result (a * b - c * d).
  Validation:
    This assertion verifies that the getDifference method correctly calculates the difference when the parameters are a mix of positive and negative integers. This test is significant to ensure the correct behavior of the method under different input conditions.

Scenario 4: Test with zero values

Details:
  TestName: testGetDifferenceWithZeroValues
  Description: This test is meant to check the functionality of the getDifference method when some or all of the input parameters are zero.
  Execution:
    Arrange: Initialize a, b, c, and d with some or all zero values.
    Act: Invoke the getDifference method.
    Assert: Assert that the returned value is equal to the expected result (a * b - c * d).
  Validation:
    This assertion verifies that the getDifference method correctly calculates the difference when some or all parameters are zero. This test is significant to ensure the correct behavior of the method in edge cases.
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1007;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ProductGetDifferenceTest {

	private Product product;

	@Before
	public void setup() {
		product = new Product();
	}

	@Test
	public void testGetDifferenceWithPositiveIntegers() {
		product.setA(5);
		product.setB(4);
		product.setC(3);
		product.setD(2);
		int expected = 5 * 4 - 3 * 2;
		Assert.assertEquals(expected, product.getDifference());
	}

	@Test
	public void testGetDifferenceWithNegativeIntegers() {
		product.setA(-5);
		product.setB(-4);
		product.setC(-3);
		product.setD(-2);
		int expected = -5 * -4 - -3 * -2;
		Assert.assertEquals(expected, product.getDifference());
	}

	@Test
	public void testGetDifferenceWithMixedIntegers() {
		product.setA(5);
		product.setB(-4);
		product.setC(3);
		product.setD(-2);
		int expected = 5 * -4 - 3 * -2;
		Assert.assertEquals(expected, product.getDifference());
	}

	@Test
	public void testGetDifferenceWithZeroValues() {
		product.setA(0);
		product.setB(0);
		product.setC(0);
		product.setD(0);
		int expected = 0 * 0 - 0 * 0;
		Assert.assertEquals(expected, product.getDifference());
	}

}
