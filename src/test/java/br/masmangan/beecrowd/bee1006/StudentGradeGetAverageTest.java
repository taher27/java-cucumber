// ********RoostGPT********
/*
Test generated by RoostGPT for test testJavaCucumber using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Scenario 1: Test getAverage method with positive numbers

Details:
  TestName: testGetAverageWithPositiveNumbers
  Description: This test is meant to check the correctness of the method getAverage when all the inputs are positive numbers.
Execution:
  Arrange: Set up variables a, b, and c with positive values.
  Act: Invoke the getAverage method.
  Assert: Compare the actual result returned by the getAverage method with the expected average.
Validation:
  The assertion aims to verify that the getAverage method correctly calculates the average of positive numbers. The expected result is calculated manually based on the input values. The significance of this test is to ensure that the method works correctly with positive numbers.

Scenario 2: Test getAverage method with negative numbers

Details:
  TestName: testGetAverageWithNegativeNumbers
  Description: This test is meant to check if the getAverage method correctly calculates the average when all the inputs are negative numbers.
Execution:
  Arrange: Set up variables a, b, and c with negative values.
  Act: Invoke the getAverage method.
  Assert: Compare the actual result returned by the getAverage method with the expected average.
Validation:
  The assertion aims to verify that the getAverage method correctly calculates the average of negative numbers. The expected result is calculated manually based on the input values. The significance of this test is to ensure that the method works correctly with negative numbers.

Scenario 3: Test getAverage method with zero

Details:
  TestName: testGetAverageWithZero
  Description: This test is meant to check if the getAverage method correctly calculates the average when one or more inputs are zero.
Execution:
  Arrange: Set up variables a, b, and c, where at least one of them is zero.
  Act: Invoke the getAverage method.
  Assert: Compare the actual result returned by the getAverage method with the expected average.
Validation:
  The assertion aims to verify that the getAverage method correctly calculates the average when inputs include zero. The expected result is calculated manually based on the input values. The significance of this test is to ensure that the method works correctly when inputs include zero.
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1006;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import br.masmangan.beecrowd.bee1006.StudentGrade; // import the StudentGrade class

public class StudentGradeGetAverageTest {

	private StudentGrade studentGrade;

	@Before
	public void setUp() {
		studentGrade = new StudentGrade();
	}

	@Test
	public void testGetAverageWithPositiveNumbers() {
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		double expectedAverage = (2.0 * 2.0 + 3.0 * 3.0 + 5.0 * 5.0) / 10.0;
		Assert.assertEquals(expectedAverage, studentGrade.getAverage(), 0.0);
	}

	@Test
	public void testGetAverageWithNegativeNumbers() {
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		studentGrade.setC(-5.0);
		double expectedAverage = (-2.0 * 2.0 + -3.0 * 3.0 + -5.0 * 5.0) / 10.0;
		Assert.assertEquals(expectedAverage, studentGrade.getAverage(), 0.0);
	}

	@Test
	public void testGetAverageWithZero() {
		studentGrade.setA(0.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		double expectedAverage = (0.0 * 2.0 + 3.0 * 3.0 + 5.0 * 5.0) / 10.0;
		Assert.assertEquals(expectedAverage, studentGrade.getAverage(), 0.0);
	}

}
