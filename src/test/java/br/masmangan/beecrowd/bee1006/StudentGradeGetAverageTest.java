
// ********RoostGPT********
/*
Test generated by RoostGPT for test SampleJavaTestLogs using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
  Scenario 1: Normal case where all grades are positive

  Details:
    TestName: testAverageWithAllPositiveGrades.
    Description: This test checks the average calculation when all grades a, b, c are positive numbers.
  Execution:
    Arrange: Instantiate a StudentGrade object and set a, b, c to any positive values.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the getAverage method correctly calculates the average of the grades. The expected result is based on the formula provided in the method.

  Scenario 2: Case where all grades are zero

  Details:
    TestName: testAverageWithAllZeroGrades.
    Description: This test checks the average calculation when all grades a, b, c are zero.
  Execution:
    Arrange: Instantiate a StudentGrade object and set a, b, c to zero.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is zero.
  Validation:
    The assertion verifies that the getAverage method correctly calculates the average when all grades are zero. The expected result is zero as the average of zero grades is zero.

  Scenario 3: Case where all grades are negative

  Details:
    TestName: testAverageWithAllNegativeGrades.
    Description: This test checks the average calculation when all grades a, b, c are negative numbers.
  Execution:
    Arrange: Instantiate a StudentGrade object and set a, b, c to any negative values.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the getAverage method correctly calculates the average of the grades, even when they're negative. The expected result is based on the formula provided in the method.

  Scenario 4: Case where a grade is not set

  Details:
    TestName: testAverageWithUnsetGrade.
    Description: This test checks the average calculation when one or more grades is not set.
  Execution:
    Arrange: Instantiate a StudentGrade object and only set a, b. Do not set c.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the getAverage method correctly calculates the average when a grade is not set. The expected result is based on the formula provided in the method, considering the unset grade as zero.

  Scenario 5: Case where all grades are maximum double values

  Details:
    TestName: testAverageWithMaxDoubleGrades.
    Description: This test checks the average calculation when all grades a, b, c are maximum double values.
  Execution:
    Arrange: Instantiate a StudentGrade object and set a, b, c to Double.MAX_VALUE.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the getAverage method correctly calculates the average when the grades are maximum double values. The expected result is based on the formula provided in the method.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {

	@Test
	@Tag("valid")
	public void testAverageWithAllPositiveGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		double expected = (2.0 * 2.0 + 3.0 * 3.0 + 5.0 * 5.0) / 10.0;
		assertEquals(expected, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void testAverageWithAllZeroGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(0.0);
		assertEquals(0.0, studentGrade.getAverage());
	}

	@Test
	@Tag("invalid")
	public void testAverageWithAllNegativeGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		studentGrade.setC(-5.0);
		double expected = (-2.0 * 2.0 + -3.0 * 3.0 + -5.0 * 5.0) / 10.0;
		assertEquals(expected, studentGrade.getAverage());
	}

	@Test
	@Tag("invalid")
	public void testAverageWithUnsetGrade() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		double expected = (2.0 * 2.0 + 3.0 * 3.0 + 0.0 * 5.0) / 10.0;
		assertEquals(expected, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void testAverageWithMaxDoubleGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(Double.MAX_VALUE);
		studentGrade.setB(Double.MAX_VALUE);
		studentGrade.setC(Double.MAX_VALUE);
		double expected = (Double.MAX_VALUE * 2.0 + Double.MAX_VALUE * 3.0 + Double.MAX_VALUE * 5.0) / 10.0;
		assertEquals(expected, studentGrade.getAverage());
	}

}