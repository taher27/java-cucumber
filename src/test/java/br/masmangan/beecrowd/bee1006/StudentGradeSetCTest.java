// ********RoostGPT********
/*
Test generated by RoostGPT for test testJavaCucumber using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=setC_6b626570ad
ROOST_METHOD_SIG_HASH=setC_f40d5436c1

================================VULNERABILITIES================================
Vulnerability: CWE-20: Improper Input Validation
Issue: The method accepts any double value without validation. If the variable 'c' has constraints on its value, this could lead to unexpected behaviour or errors.
Solution: Implement input validation to ensure 'c' falls within expected range before setting its value.

Vulnerability: CWE-359: Exposure of Private Information ('Privacy Violation')
Issue: If the variable 'c' holds sensitive data, using a public setter method could potentially expose this data to unintended parts of the application or to malicious actors.
Solution: If 'c' holds sensitive data, consider using more secure methods of setting its value, such as ensuring the method is called in a secure context or encrypting the data.

================================================================================
Scenario 1: Test setting a positive value for c

Details:
  TestName: testSetPositiveC
  Description: This test is meant to check if the method setC correctly sets the value of c when a positive number is passed as an argument.
  Execution:
    Arrange: No setup required as there are no dependencies.
    Act: Invoke the setC method with a positive number.
    Assert: Use a getter or reflection to verify that the value of c has been updated.
  Validation:
    The assertion aims to verify that the value of c is updated correctly when a positive number is passed. This test is significant as it validates the basic functionality of the method.

Scenario 2: Test setting a negative value for c

Details:
  TestName: testSetNegativeC
  Description: This test is meant to check if the method setC correctly sets the value of c when a negative number is passed as an argument.
  Execution:
    Arrange: No setup required as there are no dependencies.
    Act: Invoke the setC method with a negative number.
    Assert: Use a getter or reflection to verify that the value of c has been updated.
  Validation:
    The assertion aims to verify that the value of c is updated correctly when a negative number is passed. This test is significant as it validates that the method can handle negative numbers.

Scenario 3: Test setting zero for c

Details:
  TestName: testSetZeroC
  Description: This test is meant to check if the method setC correctly sets the value of c when zero is passed as an argument.
  Execution:
    Arrange: No setup required as there are no dependencies.
    Act: Invoke the setC method with zero.
    Assert: Use a getter or reflection to verify that the value of c has been updated.
  Validation:
    The assertion aims to verify that the value of c is updated correctly when zero is passed. This test is significant as it validates that the method can handle zero as an argument.

Scenario 4: Test setting a very large value for c

Details:
  TestName: testSetLargeC
  Description: This test is meant to check if the method setC correctly sets the value of c when a very large number is passed as an argument.
  Execution:
    Arrange: No setup required as there are no dependencies.
    Act: Invoke the setC method with a very large number.
    Assert: Use a getter or reflection to verify that the value of c has been updated.
  Validation:
    The assertion aims to verify that the value of c is updated correctly when a very large number is passed. This test is significant as it validates that the method can handle large numbers.
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1006;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class StudentGradeSetCTest {

	@Test
	public void testSetPositiveC() {
		double positiveC = 5.0;
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(positiveC);
		assertEquals(positiveC * 5.0 / 10.0, studentGrade.getAverage(), 0.0);
	}

	@Test
	public void testSetNegativeC() {
		double negativeC = -5.0;
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(negativeC);
		assertEquals(negativeC * 5.0 / 10.0, studentGrade.getAverage(), 0.0);
	}

	@Test
	public void testSetZeroC() {
		double zeroC = 0.0;
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(zeroC);
		assertEquals(zeroC, studentGrade.getAverage(), 0.0);
	}

	@Test
	public void testSetLargeC() {
		double largeC = Double.MAX_VALUE;
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(largeC);
		assertEquals(largeC * 5.0 / 10.0, studentGrade.getAverage(), 0.0);
	}

}
