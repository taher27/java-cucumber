/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test SampleJavaTest using AI Type  and AI Model

ROOST_METHOD_HASH=getArea_db993df5e2
ROOST_METHOD_SIG_HASH=getArea_fc67037257

"""
Scenario 1: Validate the area of the circle when the radius is zero

Details:
TestName: testAreaWhenRadiusIsZero
Description: This test is meant to check the area of the circle when the radius is set to zero. The expected area should also be zero in this case.
Execution:
Arrange: Create a Circle entity and set the radius to zero.
Act: Invoke the getArea method.
Assert: Use JUnit assertions to validate that the returned area is zero.
Validation:
The assertion verifies that the area of a circle with radius zero is also zero. This is significant as it validates the mathematical formula that the area of a circle is PI times the radius squared.

Scenario 2: Validate the area of the circle when the radius is positive

Details:
TestName: testAreaWhenRadiusIsPositive
Description: This test is meant to check the area of the circle when the radius is set to a positive number. The expected area should be PI times the radius squared.
Execution:
Arrange: Create a Circle entity and set the radius to a positive number.
Act: Invoke the getArea method.
Assert: Use JUnit assertions to validate that the returned area is as expected.
Validation:
The assertion verifies that the area of a circle with a positive radius is calculated correctly. This is significant as it ensures the correct implementation of the mathematical formula.

Scenario 3: Validate the area of the circle when the radius is negative

Details:
TestName: testAreaWhenRadiusIsNegative
Description: This test is meant to check the area of the circle when the radius is set to a negative number. The expected area should be NaN because the square of a negative number is a positive, but a circle cannot have a negative radius.
Execution:
Arrange: Create a Circle entity and set the radius to a negative number.
Act: Invoke the getArea method.
Assert: Use JUnit assertions to validate that the returned area is NaN.
Validation:
The assertion verifies that the area of a circle with a negative radius is NaN. This is significant as it is consistent with the mathematical principle that a circle cannot have a negative radius.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1002;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.*;

public class CircleGetAreaTest {

	@Tag("boundary")
	@Test
	public void testAreaWhenRadiusIsZero() {
		Circle circle = new Circle();
		circle.setRadius(0);
		double actualArea = circle.getArea();
		assertEquals(0.0, actualArea, "The area of a circle with radius zero should be zero.");
	}

	@Tag("valid")
	@Test
	public void testAreaWhenRadiusIsPositive() {
		Circle circle = new Circle();
		circle.setRadius(2);
		double actualArea = circle.getArea();
		double expectedArea = Circle.PI * 2 * 2;
		assertEquals(expectedArea, actualArea,
				"The area of a circle with positive radius should be PI times the radius squared.");
	}

	@Tag("invalid")
	@Test
	public void testAreaWhenRadiusIsNegative() {
		Circle circle = new Circle();
		circle.setRadius(-2);
		double actualArea = circle.getArea();
		assertTrue(Double.isNaN(actualArea), "The area of a circle with negative radius should be NaN.");
	}

}